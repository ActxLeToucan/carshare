openapi: 3.0.3
info:
  title: Car Share API
  description: This is the API for the Car Share project.
  version: 0.0.1
  contact:
    name: Car Share, backend team
    email: 'contoux1u@etu.univ-lorraine.fr'
  license:
    name: GNU General Public License v3.0
    url: 'https://www.gnu.org/licenses/gpl-3.0.en.html'
servers:
  - url: 'https://carshare.api.antoinectx.fr'
    description: Antoine's server
  - url: 'https://carshare.apis.furwaz.fr'
    description: Paul's server
paths:
  /users/signup:
    post:
      summary: Sign up
      description: Create a new user
      operationId: signup
      tags:
        - Users
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: john@example.com
                password:
                  type: string
                  example: Password123$
                firstName:
                  type: string
                  example: John
                lastName:
                  type: string
                  example: Doe
                phone:
                  type: string
                  example: "+330612345678"
                gender:
                  type: integer
                  required: false
                  default: -1
                  enum:
                    - -1
                    - 0
                    - 1
                hasCar:
                  type: boolean
                  required: false
                  default: false
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User created
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Password is required.
        '500':
          $ref: '#/components/responses/internalError'

  /users/login:
    post:
      summary: Login
      description: Login to the API
      operationId: login
      tags:
        - Users
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: john@example.com
                password:
                  type: string
                  example: Password123$
      responses:
        '200':
          description: User logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User logged in
                  userId:
                    type: integer
                    example: 1
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Password is required.
        '401':
          $ref: '#/components/responses/invalidCredentials'
        '500':
          $ref: '#/components/responses/internalError'

  /users/me:
    get:
      summary: Get user
      description: Get the current user
      operationId: getCurrentUser
      tags:
        - Users
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: The current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/noToken'
        '404':
          $ref: '#/components/responses/userNotFound'
        '498':
          $ref: '#/components/responses/invalidToken'
        '500':
          $ref: '#/components/responses/internalError'
    delete:
      summary: Delete user
      description: Delete the current user
      operationId: deleteCurrentUser
      tags:
        - Users
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
      security:
        - bearerAuth: [ ]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  example: Password123$
      responses:
        '200':
          description: User deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User deleted
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Password is required.
        '401':
          $ref: '#/components/responses/noToken'
        '404':
          $ref: '#/components/responses/userNotFound'
        '498':
          $ref: '#/components/responses/invalidToken'
        '500':
          $ref: '#/components/responses/internalError'
    patch:
      summary: Update user
      description: Update the current user
      operationId: updateCurrentUser
      tags:
        - Users
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
      security:
        - bearerAuth: [ ]
      requestBody:
        description: The user to update
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  required: false
                  example: john@example.com
                firstName:
                  type: string
                  required: false
                  example: John
                lastName:
                  type: string
                  required: false
                  example: Doe
                phone:
                  type: string
                  required: false
                  example: 0123456789
                gender:
                  type: integer
                  required: false
                  example: 1
                hasCar:
                  type: boolean
                  required: false
                  example: true
                mailNotif:
                  type: boolean
                  required: false
                  example: true
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: object
                    properties:
                      message:
                        type: string
                        example: User updated
                      user:
                        $ref: '#/components/schemas/User'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Field "hasCar" must be a boolean.
        '401':
          $ref: '#/components/responses/noToken'
        '403':
          $ref: '#/components/responses/insufficientPrivileges'
        '404':
          $ref: '#/components/responses/userNotFound'
        '498':
          $ref: '#/components/responses/invalidToken'
        '500':
          $ref: '#/components/responses/internalError'

  /users/me/password:
    patch:
      summary: Update password
      description: Update the current user's password
      operationId: updateCurrentUserPassword
      tags:
        - Users
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
      security:
        - bearerAuth: [ ]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  example: Password123$
      responses:
        '200':
          description: Password changed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Password changed
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Password is required.
        '401':
          $ref: '#/components/responses/noToken'
        '404':
          $ref: '#/components/responses/userNotFound'
        '498':
          $ref: '#/components/responses/invalidToken'
        '500':
          $ref: '#/components/responses/internalError'


  /users/password-reset:
    post:
      summary: Ask for password reset
      description: Send an email to reset the password
      operationId: askForPasswordReset
      tags:
        - Users
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: john@example.com
      responses:
        '200':
          description: Email sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: If the provided email address matches an account, a password reset email has been sent.
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Email is required.
        '429':
          $ref: '#/components/responses/tooManyRequests'
        '500':
          $ref: '#/components/responses/internalError'
    patch:
      summary: Password reset
      description: Change the password
      operationId: passwordReset
      tags:
        - Users
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
      security:
        - bearerAuth: [ ]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  example: Password123$
      responses:
        '200':
          description: Password changed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Password changed
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Password is required.
        '401':
          $ref: '#/components/responses/noToken'
        '404':
          $ref: '#/components/responses/userNotFound'
        '498':
          $ref: '#/components/responses/invalidToken'
        '500':
          $ref: '#/components/responses/internalError'

  /users/email-verification:
    post:
      summary: Ask for email verification
      description: Send an email to verify the email address
      operationId: askForEmailVerification
      tags:
        - Users
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Email sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: A verification link has been sent to your email address.
        '401':
          $ref: '#/components/responses/noToken'
        '404':
          $ref: '#/components/responses/userNotFound'
        '429':
          $ref: '#/components/responses/tooManyRequests'
        '498':
          $ref: '#/components/responses/invalidToken'
        '500':
          $ref: '#/components/responses/internalError'
    patch:
      summary: Email verification
      description: Verify the email address
      operationId: emailVerification
      tags:
        - Users
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Email verified
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Email address verified
        '401':
          $ref: '#/components/responses/noToken'
        '404':
          $ref: '#/components/responses/userNotFound'
        '498':
          $ref: '#/components/responses/invalidToken'
        '500':
          $ref: '#/components/responses/internalError'

  /travels/my:
    get:
      summary: My travels
      description: Get all the trips of the current user (as a driver or a passenger).
      tags:
        - Travels
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: The travel he has made or will make, depending on the status of the travel.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRoute'
        '401':
          $ref: '#/components/responses/noToken'
        '404':
          $ref: '#/components/responses/userNotFound'
        '498':
          $ref: '#/components/responses/invalidToken'
        '500':
          $ref: '#/components/responses/internalError'

  /settings/notifications:
    get:
      summary: Setting for mail notification
      description: True to have notification sent by mail or false to not be sent mail.
      tags:
        - Settings
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: The present value of this setting.
          content:
            application/json:
              schema:
                type: object
                properties:
                  value:
                    type: boolean
                    example: True
        '401':
          $ref: '#/components/responses/noToken'
        '404':
          $ref: '#/components/responses/userNotFound'
        '498':
          $ref: '#/components/responses/invalidToken'
        '500':
          $ref: '#/components/responses/internalError'
    patch:
      summary: Update setting
      description: Update the setting to have mail sent or not by mail when receiving a notification
      operationId: updateNotificationSetting
      tags:
        - Settings
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Update the mailNotif setting
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Settings saved
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Field "value" is required.
        '401':
          $ref: '#/components/responses/noToken'
        '404':
          $ref: '#/components/responses/userNotFound'
        '498':
          $ref: '#/components/responses/invalidToken'
        '500':
          $ref: '#/components/responses/internalError'

  /notifications/my:
    get:
      summary: Get the list of notifications
      description: Get all the notifications of the current user.
      operationId: getAllUsers
      tags:
        - Notifications
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: A list of the notifications
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfNotifications'
        '401':
          $ref: '#/components/responses/noToken'
        '404':
          $ref: '#/components/responses/userNotFound'
        '498':
          $ref: '#/components/responses/invalidToken'
        '500':
          $ref: '#/components/responses/internalError'

  /admin/users:
    get:
      summary: Get all users
      description: Get all users. Only available to admins.
      operationId: getAllUsers
      tags:
        - Admin
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: A list of all users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfUsers'
        '401':
          $ref: '#/components/responses/noToken'
        '403':
          $ref: '#/components/responses/insufficientPrivileges'
        '404':
          $ref: '#/components/responses/userNotFound'
        '498':
          $ref: '#/components/responses/invalidToken'
        '500':
          $ref: '#/components/responses/internalError'

  /admin/user/:id:
    delete:
      summary: Delete an user
      description: Delete an user. Only available to admins.
      operationId: deleteUser
      tags:
        - Admin
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - name: id
          in: path
          description: The id of the user to delete
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: User deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User deleted
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User id is invalid.
        '401':
          $ref: '#/components/responses/noToken'
        '403':
          $ref: '#/components/responses/insufficientPrivileges'
        '404':
          $ref: '#/components/responses/userNotFound'
        '498':
          $ref: '#/components/responses/invalidToken'
        '500':
          $ref: '#/components/responses/internalError'
    patch:
      summary: Update an user
      description: Update an user. Only available to admins. Only the fields to update are required.
      operationId: updateUser
      tags:
        - Admin
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
        - name: id
          in: path
          description: The id of the user to update
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: [ ]
      requestBody:
        description: The user to update
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  required: false
                  example: john@example.com
                firstName:
                  type: string
                  required: false
                  example: John
                lastName:
                  type: string
                  required: false
                  example: Doe
                phone:
                  type: string
                  required: false
                  example: 0123456789
                gender:
                  type: integer
                  required: false
                  example: 1
                hasCar:
                  type: boolean
                  required: false
                  example: true
                mailNotif:
                  type: boolean
                  required: false
                  example: true
                level:
                  type: integer
                  required: false
                  example: 1
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: object
                    properties:
                      message:
                        type: string
                        example: User updated
                      user:
                        $ref: '#/components/schemas/User'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User id is invalid.
        '401':
          $ref: '#/components/responses/noToken'
        '403':
          $ref: '#/components/responses/insufficientPrivileges'
        '404':
          $ref: '#/components/responses/userNotFound'
        '498':
          $ref: '#/components/responses/invalidToken'
        '500':
          $ref: '#/components/responses/internalError'
  /travel/create:
    post:
      summary: create a new travel
      description: create a new travel with etape
      tags:
        - Travels
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
      security:
        - bearerAuth: [ ]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                departureDate:
                  type: string
                  example: 2023-03-16T09:15:36.000Z
                arrivalDate:
                  type: string
                  example: 2023-03-17T09:15:36.000Z
                maxPassengers:
                  type: integer
                  example: 10
                price:
                  type: integer
                  example: 78
                description:
                  type: string
                  example: Voyage non fumeur
                groupId:
                  type: integer
                  example: null
                listOfEtape:
                  type: array
                  items:
                    $ref: '#/components/schemas/Etape'
                  example:
                    - label: 2ter Boulevard Charlemagne 54000 Nancy
                      city: Nancy
                      context: 54, Meurthe-et-Moselle, Grand Est
                      lat: 48.683188
                      lng: 6.1877
                    - label: 2ter Boulevard Charlemagne 54000 Laxou
                      city: Laxou
                      context: 54, Meurthe-et-Moselle, Grand Est
                      lat: 49.683188
                      lng: 6.5877
                    - label: 1801 chemin Napoléon 55000 Metz
                      city: Metz
                      context: 55, Moselle, Grand Est
                      lat: 78.683188
                      lng: 6.1877

      responses:
        '201':
          description: travel create
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TravelCreate'
        '401':
          $ref: '#/components/responses/noToken'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Date is required.
        '498':
          $ref: '#/components/responses/invalidToken'
        '500':
          $ref: '#/components/responses/internalError'
components:
  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes
  parameters:
    Accept-Language:
      name: Accept-Language
      in: header
      description: The language to use in the response message (if any)
      required: false
      schema:
        type: string
        default: en
        enum:
          - en
          - fr
  responses:
    noToken:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: No token provided.
    invalidToken:
      description: Invalid/Expired token
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Invalid token provided.
    insufficientPrivileges:
      description: Insufficient privileges
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: You do not have sufficient rights to perform this action.
    invalidCredentials:
      description: Invalid credentials
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Invalid credentials provided.
    userNotFound:
      description: Not found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: User not found.
    typeError:
      description: Invalid type of value
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Invalid type of value provided.
    tooManyRequests:
      description: Too many requests
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: An email has already been sent to this address less than 10 minutes ago. Please wait before trying again.
    internalError:
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: An internal error occurred. If the problem persists, please contact an administrator.
    notImplemented:
      description: Not implemented
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: This feature is not yet implemented.
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        email:
          type: string
          example: john@example.com
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        phone:
          type: string
          example: "+330612345678"
        avatar:
          type: string
          nullable: true
          default: null
        gender:
          type: integer
          default: -1
        hasCar:
          type: boolean
          default: false
        mailNotif:
          type: boolean
          default: false
        level:
          type: integer
          default: 0
        createdAt:
          type: string
          format: date-time
        emailVerifiedOn:
          type: string
          format: date-time
          nullable: true
          default: null
    ArrayOfUsers:
      type: array
      items:
        $ref: '#/components/schemas/User'
      example:
        - id: 1
          email: bob@example.com
          firstName: Bob
          lastName: LeBricoleur
          phone: "0321456789"
          avatar: null
          gender: -1
          hasCar: true
          mailNotif: true
          level: 3
          createdAt: 2023-01-26T15:26:31.144Z
          emailVerifiedOn: 2023-01-26T15:26:31.144Z
        - id: 2
          email: laia@cat.world
          firstName: Laia
          lastName: Kitten
          phone: "+330612345678"
          avatar: null
          gender: 1
          hasCar: false
          mailNotif: true
          level: 1
          createdAt: 2023-02-18T13:19:23.636Z
          emailVerifiedOn: 2023-02-18T13:19:23.636Z
    ListRoute:
      type: object
      properties:
        travelAsDriver:
          type: object
          example: [ {
            id: 2,
            departureDate: "2023-02-26T10:00:58.000Z",
            arrivalDate: "2023-02-28T02:32:22.000Z",
            maxPassengers: 3,
            price: 86,
            description: null,
            status: 0,
            driverId: 1,
            groupeId: null,
            createdAt: "2023-02-23T00:00:00.000Z"

          } ]
        travelAsPassenger:
          type: object
          example: [ {
            id: 1,
            departureDate: "2023-02-25T10:00:58.000Z",
            arrivalDate: "2023-02-25T21:00:58.000Z",
            maxPassengers: 7,
            price: 89,
            description: null,
            status: 1,
            driverId: 2,
            groupeId: null,
            createdAt: "2023-02-21T10:03:07.000Z"

          } ]
    ArrayOfNotifications:
      type: array
      items:
        $ref: '#/components/schemas/Notification'
      example:
        - id: 1
          action: null
          title: Bienvenue sur car share
          message: Car share, vous souhaite la bienvenue et un agréable moment sur son site
          userId: 1
          travelId: null
          createdAt: 2023-02-27T17:52:29.000Z
        - id: 2
          action: null
          title: Groupe rejoint
          message: Vous avez rejoint le groupe des bg du 54
          userId: 1
          travelId: null
          createdAt: 2023-02-27T18:00:09.000Z
    
    Notification:
      type: object
      properties:
        id:
          type: integer
        action:
          type: string
        title:
          type: string
        message:
          type: string
        userId:
          type: integer
        travelId:
          type: integer
        createdAt:
          type: string
          format: date-time
    Etape:
      type: object
      properties:
        id:
          type: integer
        label:
          type: string
        city:
          type: string
        context:
          type: string
        lat:
          type: integer
        lng:
          type: integer
        travelId:
          type: integer
        order:
          type: integer
    TravelCreate:
      type: object
      properties:
        message:
          type: string
          example: "Travel created"
        travel:
          type: object
          properties:
            id:
              type: integer
              example: 2
            departureDate:
              type: string
              example: 2023-03-16T09:15:36.000Z
            arrivalDate:
              type: string
              example: 2023-03-17T09:15:36.000Z
            maxPassengers:
              type: integer
              example: 10
            price:
              type: integer
              example: 78
            description:
              type: string
              example: Voyage non fumeur
            groupId:
              type: integer
              example: null
            createdAt:
              type: string
              example: 2023-03-05T13:30:41.483Z
        numberOfEtape:
          type: object
          properties:
            count:
              type: integer
              example: 3