openapi: 3.0.3
info:
  title: Car Share API
  description: This is the API for the Car Share project.
  version: 0.0.1
  contact:
    name: Car Share
    email: 'contoux1u@etu.univ-lorraine.fr'
  license:
    name: GNU General Public License v3.0
    url: 'https://www.gnu.org/licenses/gpl-3.0.en.html'
servers:
  - url: 'https://carshare.api.antoinectx.fr'
paths:
  /users/signup:
    post:
      summary: Sign up
      description: Create a new user
      tags:
        - Users
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: john@example.com
                password:
                  type: string
                  example: Password123$
                firstName:
                  type: string
                  example: John
                lastName:
                  type: string
                  example: Doe
                phone:
                  type: string
                  example: "+330612345678"
                gender:
                  type: integer
                  required: false
                  default: -1
                  enum:
                    - -1
                    - 0
                    - 1
                hasCar:
                  type: boolean
                  required: false
                  default: false
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User created
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Password is required.
        '500':
          $ref: '#/components/responses/internalError'

  /users/login:
    post:
      summary: Login
      description: Login to the API
      tags:
        - Users
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: john@example.com
                password:
                  type: string
                  example: Password123$
      responses:
        '200':
          description: User logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User logged in
                  userId:
                    type: integer
                    example: 1
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Password is required.
        '401':
          $ref: '#/components/responses/invalidCredentials'
        '500':
          $ref: '#/components/responses/internalError'

  /users/me:
    get:
      summary: Get user
      description: Get the current user
      tags:
        - Users
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: The current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/noToken'
        '404':
          $ref: '#/components/responses/userNotFound'
        '498':
          $ref: '#/components/responses/invalidToken'
        '500':
          $ref: '#/components/responses/internalError'
    delete:
      summary: Delete user
      description: Delete the current user
      tags:
        - Users
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
      security:
        - bearerAuth: [ ]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  example: Password123$
      responses:
        '200':
          description: User deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User deleted
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Password is required.
        '401':
          $ref: '#/components/responses/noToken'
        '404':
          $ref: '#/components/responses/userNotFound'
        '498':
          $ref: '#/components/responses/invalidToken'
        '500':
          $ref: '#/components/responses/internalError'
    patch:
      summary: Update user
      description: Update the current user
      tags:
        - Users
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
      security:
        - bearerAuth: [ ]
      responses:
        '501':
          $ref: '#/components/responses/notImplemented'

  /users/password-reset:
    post:
      summary: Ask for password reset
      description: Send an email to reset the password
      tags:
        - Users
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: john@example.com
      responses:
        '200':
          description: Email sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: If the provided email address matches an account, a password reset email has been sent.
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Email is required.
        '500':
          $ref: '#/components/responses/internalError'
    patch:
      summary: Password reset
      description: Change the password
      tags:
        - Users
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
      security:
        - bearerAuth: [ ]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  example: Password123$
      responses:
        '200':
          description: Password changed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Password changed
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Password is required.
        '401':
          $ref: '#/components/responses/noToken'
        '404':
          $ref: '#/components/responses/userNotFound'
        '498':
          $ref: '#/components/responses/invalidToken'
        '500':
          $ref: '#/components/responses/internalError'

  /users/email-verification:
    post:
      summary: Ask for email verification
      description: Send an email to verify the email address
      tags:
        - Users
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Email sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: A verification link has been sent to your email address.
        '401':
          $ref: '#/components/responses/noToken'
        '404':
          $ref: '#/components/responses/userNotFound'
        '498':
          $ref: '#/components/responses/invalidToken'
        '500':
          $ref: '#/components/responses/internalError'
    patch:
      summary: Email verification
      description: Verify the email address
      tags:
        - Users
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Email verified
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Email address verified
        '401':
          $ref: '#/components/responses/noToken'
        '404':
          $ref: '#/components/responses/userNotFound'
        '498':
          $ref: '#/components/responses/invalidToken'
        '500':
          $ref: '#/components/responses/internalError'

  /admin/users:
    get:
      summary: Get all users
      description: Get all users. Only available to admins.
      tags:
        - Admin
      parameters:
        - $ref: '#/components/parameters/Accept-Language'
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: A list of all users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfUsers'
        '401':
          $ref: '#/components/responses/noToken'
        '403':
          $ref: '#/components/responses/insufficientPrivileges'
        '404':
          $ref: '#/components/responses/userNotFound'
        '498':
          $ref: '#/components/responses/invalidToken'
        '500':
          $ref: '#/components/responses/internalError'
components:
  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes
  parameters:
    Accept-Language:
      name: Accept-Language
      in: header
      description: The language to use in the response message (if any)
      required: false
      schema:
        type: string
        default: en
        enum:
          - en
          - fr
  responses:
    noToken:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: No token provided.
    invalidToken:
      description: Invalid/Expired token
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Invalid token provided.
    insufficientPrivileges:
      description: Insufficient privileges
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: You do not have sufficient rights to perform this action.
    invalidCredentials:
      description: Invalid credentials
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Invalid credentials provided.
    userNotFound:
      description: Not found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: User not found.
    internalError:
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: An internal error occurred. If the problem persists, please contact an administrator.
    notImplemented:
      description: Not implemented
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: This feature is not yet implemented.
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        email:
          type: string
          example: john@example.com
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        phone:
          type: string
          example: "+330612345678"
        avatar:
          type: string
          nullable: true
          default: null
        gender:
          type: integer
          default: -1
        hasCar:
          type: boolean
          default: false
        mailNotif:
          type: boolean
          default: false
        level:
          type: integer
          default: 0
        createdAt:
          type: string
          format: date-time
    ArrayOfUsers:
      type: array
      items:
        $ref: '#/components/schemas/User'
      example:
        - id: 1
          email: bob@example.com
          firstName: Bob
          lastName: LeBricoleur
          phone: "0321456789"
          avatar: null
          gender: -1
          hasCar: true
          mailNotif: true
          level: 3
          createdAt: 2023-01-26T15:26:31.144Z
        - id: 2
          email: laia@cat.world
          firstName: Laia
          lastName: Kitten
          phone: "+330612345678"
          avatar: null
          gender: 1
          hasCar: false
          mailNotif: true
          level: 1
          createdAt: 2023-02-18T13:19:23.636Z
