// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                             Int            @id @default(autoincrement())
  email                          String         @unique @db.VarChar(64)
  emailVerifiedOn                DateTime?
  password                       String         @db.Text
  firstName                      String?        @db.VarChar(50)
  lastName                       String?        @db.VarChar(50)
  phone                          String?        @db.VarChar(16)
  avatar                         String?        @db.VarChar(255)
  gender                         Int            @default(-1)
  hasCar                         Boolean        @default(false)
  mailNotif                      Boolean        @default(false)
  level                          Int            @default(0)
  evaluationsPublished           Evaluation[]   @relation("evaluator")
  evaluationsReceived            Evaluation[]   @relation("evaluated")
  travelsAsDriver                Travel[]       @relation("driver")
  travelsAsPassenger             Passenger[]
  notifications                  Notification[] @relation("recipient")
  notificationsSent              Notification[] @relation("sender")
  createdGroups                  Group[]        @relation("creator")
  groups                         Group[]        @relation("users")
  createdAt                      DateTime       @default(now())
  lastPasswordResetEmailedOn     DateTime?
  lastEmailVerificationEmailedOn DateTime?
  locale                         String?        @db.VarChar(10)
  timezone                       String?        @db.VarChar(50)
}

model Travel {
  id            Int            @id @default(autoincrement())
  maxPassengers Int            @default(1)
  price         Float          @default(0)
  description   String?        @db.Text
  status        Int            @default(0)
  driver        User           @relation(fields: [driverId], references: [id], name: "driver", onDelete: Cascade)
  driverId      Int
  etapes        Etape[]
  evaluations   Evaluation[]
  notifications Notification[]
  group         Group?         @relation(fields: [groupId], references: [id], onDelete: SetNull)
  groupId       Int?
  createdAt     DateTime       @default(now())
}

model Passenger {
  // TODO: rename to Booking
  id            Int            @id @default(autoincrement())
  passenger     User           @relation(fields: [passengerId], references: [id], onDelete: Cascade)
  passengerId   Int
  status        Int            @default(0)
  comment       String?        @db.Text
  departure     Etape          @relation(name: "stepDeparture", fields: [departureId], references: [id], onDelete: Cascade)
  departureId   Int
  arrival       Etape          @relation(name: "stepArrival", fields: [arrivalId], references: [id], onDelete: Cascade)
  arrivalId     Int
  notifications Notification[]
}

model Etape {
  // TODO: rename to Step
  id                     Int         @id @default(autoincrement())
  label                  String      @db.Text // ex: "2ter Boulevard Charlemagne 54000 Nancy"
  city                   String      @db.Text // ex: "Nancy"
  context                String      @db.Text // ex: "54, Meurthe-et-Moselle, Grand Est"
  lat                    Float // ex: 48.683188
  lng                    Float // ex: 6.161877
  travel                 Travel      @relation(fields: [travelId], references: [id], onDelete: Cascade)
  travelId               Int
  date                   DateTime
  departuresOfPassengers Passenger[] @relation(name: "stepDeparture")
  arrivalsOfPassengers   Passenger[] @relation(name: "stepArrival")
}

model Evaluation {
  id          Int      @id @default(autoincrement())
  note        Int
  travel      Travel   @relation(fields: [travelId], references: [id], onDelete: Cascade)
  travelId    Int
  evaluator   User     @relation(fields: [evaluatorId], references: [id], name: "evaluator", onDelete: Cascade)
  evaluatorId Int
  evaluated   User     @relation(fields: [evaluatedId], references: [id], name: "evaluated", onDelete: Cascade)
  evaluatedId Int
  createdAt   DateTime @default(now())
}

model Notification {
  id        Int        @id @default(autoincrement())
  type      String?    @db.VarChar(25)
  title     String     @db.Text
  message   String     @db.Text
  user      User       @relation(fields: [userId], references: [id], name: "recipient", onDelete: Cascade)
  userId    Int
  travel    Travel?    @relation(fields: [travelId], references: [id], onDelete: SetNull)
  travelId  Int?
  sender    User?      @relation(fields: [senderId], references: [id], name: "sender", onDelete: SetNull)
  senderId  Int?
  createdAt DateTime   @default(now())
  booking   Passenger? @relation(fields: [bookingId], references: [id], onDelete: SetNull)
  bookingId Int?
}

model Group {
  id        Int      @id @default(autoincrement())
  name      String   @db.Text
  creator   User     @relation(fields: [creatorId], references: [id], name: "creator", onDelete: Cascade)
  creatorId Int
  users     User[]   @relation("users")
  travels   Travel[]
  createdAt DateTime @default(now())
}

view BookingSteps {
  bookingId Int
  stepId    Int

  @@id([bookingId, stepId])
}
